/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import com.google.gson.Gson;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.IOError;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import static org.junit.Assert.*;

public class AppTest {
    
    @Test public void testBookToString() {
        try {
            Quote[] quotesArray= FileReadAndWrite.fileToReaderObject("assets", "recentquotes_json.txt");
            String expectedTest = "Quote: “I am good, but not an angel. I do sin, but I am not the devil. I am just a small girl in a big world trying to find someone to love.” - Author: Marilyn Monroe";
            assertEquals("Our expected text should equal the book.toString method", expectedTest, quotesArray[0].toString());

        } catch (IOException err) {
            System.out.println("API request failed. Fetching data from file failed: " + err);

        }
    }

    @Test public void testRandomize() {

        try {
            Quote[] quotesArray = FileReadAndWrite.fileToReaderObject("assets", "recentquotes_json.txt");
            String newQuoteAndAuthor1 = Randomizer.generateQuoteAndAuthor(quotesArray);
            String newQuoteAndAuthor2 = Randomizer.generateQuoteAndAuthor(quotesArray);
            assertFalse("Two quote strings should differ from one another",
                    newQuoteAndAuthor1.equals(newQuoteAndAuthor2));

        } catch (IOException err) {
            System.out.println("API request failed. Fetching data from file failed: " + err);

        }
    }

    @Test public void testRandomizeHarder() {

        try {
            Quote[] quotesArr = FileReadAndWrite.fileToReaderObject("assets", "recentquotes_json.txt");
            String test1 = Randomizer.generateQuoteAndAuthor(quotesArr);
            String test2 = Randomizer.generateQuoteAndAuthor(quotesArr);
            String test3 = Randomizer.generateQuoteAndAuthor(quotesArr);
            String test4 = Randomizer.generateQuoteAndAuthor(quotesArr);
            String test5 = Randomizer.generateQuoteAndAuthor(quotesArr);

            assertFalse("The two strings returned by the randomizer should be unique.", test1.equals(test2));
            assertFalse("The two strings returned by the randomizer should be unique.", test1.equals(test3));
            assertFalse("The two strings returned by the randomizer should be unique.", test1.equals(test4));
            assertFalse("The two strings returned by the randomizer should be unique.", test1.equals(test5));

            } catch (IOException err) {
                System.out.println("API request failed. Fetching data from file failed: " + err);
        }

    }

    @Test public void testAPIQuery_cacheToFile() {
        StringBuilder content = new StringBuilder();

        // attribution for code structure: https://canvas.instructure.com/courses/1476850/discussion_topics/7249178
        // set url object to contain api-url to be queried
        try {
            URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;

            while ((inputLine = in.readLine()) != null) {
                content.append(inputLine);
            }
            in.close();

            // use Gson to read the data and turn it into a apiquote class
            Gson gson = new Gson();
            APIQuote apiQuote = gson.fromJson(content.toString(), APIQuote.class);

            // turn this into a quote and then use the toString method
            Quote transformedQuote = apiQuote.apiQuoteTransformer();

            // save quote to list of quote objects in json file
            List<Quote> newJSONList = APIQuery.cacheQuoteToFile(transformedQuote, "assets",
                    "recentquotes_json.txt");

            List<Quote> updatedJSONList = APIQuery.cacheQuoteToFile(transformedQuote, "assets",
                    "recentquotes_json.txt");

            if(newJSONList != null && updatedJSONList != null){
                int listSizeInitial = newJSONList.size();
                int listSizeUpdated = updatedJSONList.size();

                /////////////// -- list sizes should differ by one after the cacheToFile method called

                assertTrue("updated list size should be bigger by one",
                        (listSizeInitial + 1) == listSizeUpdated);
            }

        } catch (IOException err){
            System.out.println("Something happened while making API request: " + err);

        }

    }

    @Test public void testAPIQuery_whatIsAddedToListIsNotIdentical() {
        StringBuilder content = new StringBuilder();

        // attribution for code structure: https://canvas.instructure.com/courses/1476850/discussion_topics/7249178
        // set url object to contain api-url to be queried
        try {
            URL url = new URL("http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en");
            HttpURLConnection con = (HttpURLConnection) url.openConnection();
            con.setRequestMethod("GET");

            BufferedReader in = new BufferedReader(
                    new InputStreamReader(con.getInputStream()));
            String inputLine;

            while ((inputLine = in.readLine()) != null) {
                content.append(inputLine);
            }
            in.close();

            // use Gson to read the data and turn it into a apiquote class
            Gson gson = new Gson();
            APIQuote apiQuote = gson.fromJson(content.toString(), APIQuote.class);

            // turn this into a quote and then use the toString method
            Quote transformedQuote = apiQuote.apiQuoteTransformer();

            // save quote to list of quote objects in json file
            List<Quote> newJSONList = APIQuery.cacheQuoteToFile(transformedQuote, "assets",
                    "recentquotes_json.txt");

            List<Quote> updatedJSONList = APIQuery.cacheQuoteToFile(transformedQuote, "assets",
                    "recentquotes_json.txt");

            if (newJSONList != null && updatedJSONList != null) {
                int listSizeInitial = newJSONList.size();
                int listSizeUpdated = updatedJSONList.size();

                /////////////////////////// -- list items just added should be different due to randomness

                assertFalse("objects added to sequentially to list should be different due to randomness",
                        updatedJSONList.get(listSizeInitial - 1).equals(updatedJSONList.get(listSizeUpdated - 1)));
            }

        } catch (IOException err) {
            System.out.println("Something happened while making API request: " + err);

        }
    }


        // if api call fails, we should still get a string out that contains the fields that we expect
        @Test public void testAPIQuery_backupPath() {
            // url variable off. API call should not work
            String url = "http://api.forismatic.com/NOTTHERIGHTURL";
            String rootDirectory = "assets";
            String fileName = "recentquotes_json.txt";

            // make an API call and print out a quote procured at random from API of choice
            try {
                Quote apiQuote = APIQuery.apiQuoteGenerator(url, rootDirectory, fileName);
                System.out.println(apiQuote.toString());

                // if something goes wrong with the API call, render a quote from a file at random
            } catch (IOException e) {
                try {
                    Quote[] quotes = FileReadAndWrite.fileToReaderObject(rootDirectory, fileName);
                    String newQuoteAndAuthor = Randomizer.generateQuoteAndAuthor(quotes);

                    ////////// -- assert that string contains author and quote
                    assertTrue("string should contain Quote and Author",
                            newQuoteAndAuthor.contains("Quote") && newQuoteAndAuthor.contains("Author"));

                    // if the file path is off, alert the client that something went wrong
                } catch (IOException err) {
                    System.out.println("API request failed. Fetching data from file failed: " + err);

                }
            }
        }
}
